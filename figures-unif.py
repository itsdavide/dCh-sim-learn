#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Graphs creation with the uniform probability measure code for the paper:

C. Marsala, D. Petturiti, and B. Vantaggi.
Adding Semantics to Fuzzy Similarity Measures Through the d-Choquet Integral.
In: Z. Bouraoui and S. Vesic (Eds.), Symbolic and Quantitative Approaches to 
Reasoning with Uncertainty. ECSQARU 2023, Volume 14294 of Lecture Notes 
in Computer Science, Springer, pp. 386â€“399, 2023.  
"""

import numpy as np
import matplotlib.pyplot as plt

ps = np.arange(0.5, 5, 0.5)

# Euclidean similarity mean accuracy for Iris
E_Iris = 0.9400782361308677 * 100

# Cosine similarity mean accuracy for Iris
Cos_Iris = 0.7928520625889046 * 100

##############################################################################

# pp Iris S1 uniform
A_pp_1_u = np.array([[0.68421053, 0.68421053, 0.64864865, 0.72972973],
 [0.68421053, 0.68421053, 0.67567568, 0.7027027 ],
 [0.68421053, 0.68421053, 0.67567568, 0.7027027 ],
 [0.68421053, 0.68421053, 0.67567568, 0.7027027 ],
 [0.68421053, 0.68421053, 0.67567568, 0.7027027 ],
 [0.68421053, 0.68421053, 0.64864865, 0.7027027 ],
 [0.68421053, 0.68421053, 0.64864865, 0.7027027 ],
 [0.68421053, 0.68421053, 0.64864865, 0.7027027 ],
 [0.68421053, 0.68421053, 0.64864865, 0.67567568]])

# pp Iris S2 uniform
A_pp_2_u = np.array([[0.76315789, 0.78947368, 0.89189189, 0.86486486],
 [0.76315789, 0.78947368, 0.86486486, 0.78378378],
 [0.71052632, 0.81578947, 0.86486486, 0.78378378],
 [0.71052632, 0.78947368, 0.86486486, 0.75675676],
 [0.73684211, 0.81578947, 0.86486486, 0.72972973],
 [0.76315789, 0.81578947, 0.89189189, 0.72972973],
 [0.76315789, 0.81578947, 0.89189189, 0.72972973],
 [0.76315789, 0.81578947, 0.89189189, 0.72972973],
 [0.76315789, 0.81578947, 0.89189189, 0.75675676]])

# pp Iris S3 uniform
A_pp_3_u = np.array([[0.81578947, 0.73684211, 0.91891892, 0.78378378],
 [0.97368421, 0.92105263, 0.94594595, 1.        ],
 [0.97368421, 0.86842105, 0.94594595, 0.97297297],
 [0.94736842, 0.84210526, 0.91891892, 0.94594595],
 [0.92105263, 0.81578947, 0.91891892, 0.94594595],
 [0.92105263, 0.84210526, 0.91891892, 0.94594595],
 [0.92105263, 0.86842105, 0.91891892, 0.94594595],
 [0.92105263, 0.86842105, 0.91891892, 0.94594595],
 [0.92105263, 0.86842105, 0.91891892, 0.94594595]])

# Compute the mean accuracy
M_pp_1_u = np.array([A_pp_1_u[i, :].mean() for i in range(len(ps))]) * 100
M_pp_2_u = np.array([A_pp_2_u[i, :].mean() for i in range(len(ps))]) * 100
M_pp_3_u = np.array([A_pp_3_u[i, :].mean() for i in range(len(ps))]) * 100

# Plot the graph
plt.figure(figsize=(6, 4))
plt.title(r'Iris dataset: $\nu_u$, $\delta_{p,p}$')
plt.plot(ps, M_pp_1_u, marker='o', color='green')
plt.plot(ps, M_pp_2_u, marker='o', color='red')
plt.plot(ps, M_pp_3_u, marker='o', color='blue')
plt.plot(ps, np.ones(len(ps)) * E_Iris, color='magenta', linestyle='dashed')
plt.plot(ps, np.ones(len(ps)) * Cos_Iris, color='darkorange', linestyle='dashed')
plt.xlabel('$p$')
plt.ylabel('Mean accuracy (%)')
plt.savefig('iris-pp-unif.png')

##############################################################################

# p1 Iris S1 uniform
A_p1_1_u = np.array([[0.68421053, 0.68421053, 0.64864865, 0.7027027 ],
 [0.68421053, 0.68421053, 0.67567568, 0.7027027 ],
 [0.68421053, 0.71052632, 0.67567568, 0.7027027 ],
 [0.68421053, 0.71052632, 0.7027027 , 0.72972973],
 [0.68421053, 0.71052632, 0.72972973, 0.72972973],
 [0.68421053, 0.71052632, 0.81081081, 0.75675676],
 [0.71052632, 0.71052632, 0.83783784, 0.75675676],
 [0.71052632, 0.71052632, 0.83783784, 0.75675676],
 [0.71052632, 0.71052632, 0.83783784, 0.75675676]])

# p1 Iris S2 uniform
A_p1_2_u = np.array([[0.76315789, 0.78947368, 0.86486486, 0.78378378],
 [0.76315789, 0.78947368, 0.86486486, 0.78378378],
 [0.73684211, 0.78947368, 0.86486486, 0.78378378],
 [0.73684211, 0.78947368, 0.86486486, 0.81081081],
 [0.73684211, 0.78947368, 0.86486486, 0.83783784],
 [0.73684211, 0.76315789, 0.86486486, 0.83783784],
 [0.73684211, 0.76315789, 0.86486486, 0.83783784],
 [0.73684211, 0.76315789, 0.86486486, 0.83783784],
 [0.73684211, 0.76315789, 0.86486486, 0.83783784]])

# p1 Iris S3 uniform
A_p1_3_u = np.array([[0.97368421, 0.92105263, 0.94594595, 0.91891892],
 [0.97368421, 0.92105263, 0.94594595, 1.        ],
 [0.97368421, 0.94736842, 0.97297297, 1.        ],
 [0.97368421, 0.94736842, 0.94594595, 1.        ],
 [0.97368421, 0.92105263, 0.94594595, 1.        ],
 [0.97368421, 0.92105263, 0.94594595, 1.        ],
 [1.        , 0.92105263, 0.94594595, 1.        ],
 [1.        , 0.89473684, 0.94594595, 0.97297297],
 [1.        , 0.89473684, 0.94594595, 0.97297297]])

# Compute the mean accuracy
M_p1_1_u = np.array([A_p1_1_u[i, :].mean() for i in range(len(ps))]) * 100
M_p1_2_u = np.array([A_p1_2_u[i, :].mean() for i in range(len(ps))]) * 100
M_p1_3_u = np.array([A_p1_3_u[i, :].mean() for i in range(len(ps))]) * 100

# Plot the graph
plt.figure(figsize=(6, 4))
plt.title(r'Iris dataset: $\nu_u$, $\delta_{p,1}$')
plt.plot(ps, M_p1_1_u, marker='o', color='green')
plt.plot(ps, M_p1_2_u, marker='o', color='red')
plt.plot(ps, M_p1_3_u, marker='o', color='blue')
plt.plot(ps, np.ones(len(ps)) * E_Iris, color='magenta', linestyle='dashed')
plt.plot(ps, np.ones(len(ps)) * Cos_Iris, color='darkorange', linestyle='dashed')
plt.xlabel('$p$')
plt.ylabel('Mean accuracy (%)')
plt.savefig('iris-p1-unif.png')

##############################################################################

# 1p Iris S1 uniform
A_1p_1_u = np.array([[0.71052632, 0.71052632, 0.72972973, 0.72972973],
 [0.68421053, 0.68421053, 0.67567568, 0.7027027 ],
 [0.68421053, 0.68421053, 0.64864865, 0.7027027 ],
 [0.68421053, 0.68421053, 0.64864865, 0.67567568],
 [0.68421053, 0.68421053, 0.64864865, 0.67567568],
 [0.68421053, 0.68421053, 0.67567568, 0.67567568],
 [0.68421053, 0.68421053, 0.75675676, 0.64864865],
 [0.68421053, 0.68421053, 0.75675676, 0.56756757],
 [0.68421053, 0.60526316, 0.75675676, 0.45945946]])

# 1p Iris S2 uniform
A_1p_2_u = np.array([[0.76315789, 0.78947368, 0.86486486, 0.83783784],
 [0.76315789, 0.78947368, 0.86486486, 0.78378378],
 [0.71052632, 0.81578947, 0.86486486, 0.83783784],
 [0.71052632, 0.84210526, 0.91891892, 0.83783784],
 [0.71052632, 0.76315789, 0.91891892, 0.83783784],
 [0.71052632, 0.71052632, 0.89189189, 0.7027027 ],
 [0.57894737, 0.60526316, 0.89189189, 0.64864865],
 [0.44736842, 0.63157895, 0.78378378, 0.62162162],
 [0.42105263, 0.52631579, 0.67567568, 0.56756757]])

# 1p Iris S3 uniform
A_1p_3_u = np.array([[0.94736842, 0.76315789, 0.86486486, 0.86486486],
 [0.97368421, 0.92105263, 0.94594595, 1.        ],
 [0.97368421, 0.84210526, 0.97297297, 0.94594595],
 [0.97368421, 0.84210526, 0.97297297, 0.94594595],
 [0.92105263, 0.81578947, 0.97297297, 0.81081081],
 [0.89473684, 0.73684211, 0.94594595, 0.7027027 ],
 [0.73684211, 0.71052632, 0.91891892, 0.56756757],
 [0.71052632, 0.63157895, 0.78378378, 0.54054054],
 [0.63157895, 0.52631579, 0.7027027 , 0.48648649]])

# Compute the mean accuracy
M_1p_1_u = np.array([A_1p_1_u[i, :].mean() for i in range(len(ps))]) * 100
M_1p_2_u = np.array([A_1p_2_u[i, :].mean() for i in range(len(ps))]) * 100
M_1p_3_u = np.array([A_1p_3_u[i, :].mean() for i in range(len(ps))]) * 100

# Plot the graph
plt.figure(figsize=(6, 4))
plt.title(r'Iris dataset: $\nu_u$, $\delta_{1,p}$')
plt.plot(ps, M_1p_1_u, marker='o', color='green')
plt.plot(ps, M_1p_2_u, marker='o', color='red')
plt.plot(ps, M_1p_3_u, marker='o', color='blue')
plt.plot(ps, np.ones(len(ps)) * E_Iris, color='magenta', linestyle='dashed')
plt.plot(ps, np.ones(len(ps)) * Cos_Iris, color='darkorange', linestyle='dashed')
plt.xlabel('$p$')
plt.ylabel('Mean accuracy (%)')
plt.savefig('iris-1p-unif.png')